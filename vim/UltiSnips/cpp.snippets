snippet inc
#include "${0:`!p snip.rv = (snip.basename) or ""`}.h"
endsnippet

snippet Inc
#include <${0:stdio.h}>
endsnippet

snippet lw "Warning log message"
LOG_WARN("${0}");
endsnippet

snippet get "Getter from member"
`!p
try:
	m = re.search(r'(\w+)\s+(\w+)', snip.v.text)
	type=m.group(1)
	member=m.group(2)
except:
	snip.rv = snip.v.text`
${VISUAL}
const `!p snip.rv=type`& `!p snip.rv=member[0].upper() + member[1:]`() const {
	return `!p snip.rv=member`;
}
endsnippet

snippet ns "Namespace" b
namespace ${1:namespace} {

${VISUAL}${0}

} // $1
endsnippet

snippet nsec "Namespace ec"
namespace ec { namespace ${1:namespace} {

${VISUAL}${0}

} // $1
} // ec
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0}
};
endsnippet

snippet cls "Class (simple)" b
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2});
};
endsnippet

snippet once "Insert pragma once"
#pragma once

${VISUAL}${0}
endsnippet

snippet mfund
${4:void} ${1:`!p snip.rv = snip.basename or "ClassName"`}::${2:MemberFunction}(${3})${5};
endsnippet

snippet mfun
${4:void}
${1:`!p snip.rv = snip.basename or "ClassName"`}::${2:MemberFunction}(${3})${5}
{
	${0}
}
endsnippet

snippet TEST "gtest test case" b
TEST(${1:`!p snip.rv = snip.basename or "TestSuiteName"`}, ${2:TestCaseName})
{
	${0}
}
endsnippet

snippet AEQ "Assert Equal"
ASSERT_EQ(${1}, ${0});
endsnippet

snippet TESTF "gtest test_fixture case" b
TEST_F(${1:`!p snip.rv = snip.basename or "TestSuiteName"`}, ${2:TestCaseName})
{
	${0}
}
endsnippet

snippet SCOPE "GTest SCOPED_TRACE" b
{
	SCOPED_TRACE("${1}");
	${VISUAL}${0}
}
endsnippet

snippet dox "Doxygen comment" b
/**
	@brief ${0}
*/
endsnippet
		
snippet todo "TODO" b
// TODO: ${0}
endsnippet
